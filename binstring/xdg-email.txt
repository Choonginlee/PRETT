      0 #!/bin/sh
     12 #---------------------------------------------
     71 #   xdg-email
    111 #   Utility script to open the users favorite email program, using the
    220 #       RFC 2368 mailto: URI spec
    264 #   Refer to the usage() function below for usage.
    351 #   Copyright 2009-2010, Fathi Boudra <fabo@freedesktop.org>
    446 #   Copyright 2009-2010, Rex Dieter <rdieter@fedoraproject.org>
    546 #   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
    637 #   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
    733 #   LICENSE:
    752 #   Permission is hereby granted, free of charge, to any person obtaining a
   1066 #   copy of this software and associated documentation files (the "Software"),
   1205 #   to deal in the Software without restriction, including without limitation
   1323 #   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   1440 #   and/or sell copies of the Software, and to permit persons to whom the
   1552 #   Software is furnished to do so, subject to the following conditions:
   1665 #   The above copyright notice and this permission notice shall be included
   2001 #   in all copies or substantial portions of the Software.
   2076 #   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   2212 #   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   2332 #   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   2446 #   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
   2557 #   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   2671 #   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   3003 #   OTHER DEALINGS IN THE SOFTWARE.
   3051 #---------------------------------------------
   3131 manualpage()
   3150 cat << _MANUALPAGE
   3173 Name
   3201 xdg-email - command line tool for sending mail using the user's preferred
   3313 e-mail composer
   3334 Synopsis
   3346 xdg-email [--utf8] [--cc address] [--bcc address] [--subject text] [--body text
   3466 ] [--attach file] [ mailto-uri | address(es) ]
   3546 xdg-email { --help | --manual | --version }
   3623 Description
   3640 xdg-email opens the user's preferred e-mail composer in order to send a mail to
   3760 address(es) or mailto-uri. RFC2368 defines mailto: URIs. xdg-email limits
   4072 support to, cc, subject and body fields in mailto-uri, all other fields are
   4206 silently ignored. address(es) must follow the syntax of RFC822. Multiple
   4317 addresses may be provided as separate arguments.
   4401 All information provided on the command line is used to prefill corresponding
   4517 fields in the user's e-mail composer. The user will have the opportunity to
   4633 change any of this information before actually sending the e-mail.
   4737 xdg-email is for use inside a desktop session only. It is not recommended to
   5054 use xdg-email as root.
   5104 Options
   5115 --utf8
   5124     Indicates that all command line options that follow are in utf8. Without
   5241     this option, command line options are expected to be encoded according to
   5357     locale. If the locale already specifies utf8 this option has no effect.
   5473     This option does not affect mailto URIs that are passed on the command
   5606     line.
   5620 --cc address
   5635     Specify a recipient to be copied on the e-mail.
   5721 --bcc address
   5737     Specify a recipient to be blindly copied on the e-mail.
   6033 --subject text
   6052     Specify a subject for the e-mail.
   6120 --body text
   6134     Specify a body for the e-mail. Since the user will be able to make changes
   6253     before actually sending the e-mail, this can be used to provide the user
   6370     with a template for the e-mail. text may contain linebreaks.
   6471 --attach file
   6510     Specify an attachment for the e-mail. file must point to an existing file.
   6630     Some e-mail applications require the file to remain present after xdg-email
   6750     returns.
   6766 --help
   6775     Show command synopsis.
   7030 --manual
   7041     Show this manual page.
   7074 --version
   7106     Show the xdg-utils version information.
   7163 Environment Variables
   7212 xdg-email honours the following environment variables:
   7302 XDG_UTILS_DEBUG_LEVEL
   7330     Setting this environment variable to a non-zero numerical value makes
   7442     xdg-email do more verbose reporting on stderr. Setting a higher value
   7554     increases the verbosity.
   7612 Exit Codes
   7626 An exit code of 0 indicates success while a non-zero exit code indicates
   7737 failure. The following failure codes can be returned:
  10030     Error in command line syntax.
  10074     One of the files passed on the command line did not exist.
  10175     A required tool could not be found.
  10247     The action failed.
  10300     No permission to read one of the files passed on the command line.
  10410 See Also
  10422 xdg-open(1), xdg-mime(1), MIME applications associations specification, RFC
  10536 6068 - The 'mailto' URI Scheme
  10576 Examples
  10610 xdg-email 'Jeremy White <jwhite@example.com>'
  10667 xdg-email --attach /tmp/logo.png \
  10732           --subject 'Logo contest' \
  10777           --body 'Attached you find the logo for the contest.' \
  11100           'jwhite@example.com'
  11140 xdg-email --subject 'Your password is about to expire' \
  11231           'jwhite@example.com' 'bastian@example.com' 'whipple@example.com'
  11345 _MANUALPAGE
  11364 usage()
  11376 cat << _USAGE
  11414 xdg-email - command line tool for sending mail using the user's preferred
  11526 e-mail composer
  11547 Synopsis
  11561 xdg-email [--utf8] [--cc address] [--bcc address] [--subject text] [--body text
  11701 ] [--attach file] [ mailto-uri | address(es) ]
  11761 xdg-email { --help | --manual | --version }
  12036 _USAGE
  12050 #@xdg-utils-common@
  12075 #----------------------------------------------------------------------------
  12213 #   Common utility functions included in all XDG wrapper scripts
  12314 #----------------------------------------------------------------------------
  12433 DEBUG()
  12445   [ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && return 0;
  12526   [ ${XDG_UTILS_DEBUG_LEVEL} -lt $1 ] && return 0;
  12611   shift
  12621   echo "$@" >&2
  12644 # This handles backslashes but not quote marks.
  12724 first_word()
  12743     read first rest
  12767     echo "$first"
  13014 #-------------------------------------------------------------
  13113 # map a binary to a .desktop file
  13155 binary_to_desktop_file()
  13210     search="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
  13350     binary="`which "$1"`"
  13402     binary="`readlink -f "$binary"`"
  13447     base="`basename "$binary"`"
  13507     IFS=:
  13521     for dir in $search; do
  13554         unset IFS
  13576         [ "$dir" ] || continue
  13635         [ -d "$dir/applications" ] || [ -d "$dir/applnk" ] || continue
  13744         for file in "$dir"/applications/*.desktop "$dir"/applications/*/*.desktop "$dir"/applnk/*.desktop "$dir"/applnk/*/*.desktop; do
  14154             [ -r "$file" ] || continue
  14223             # Check to make sure it's worth the processing.
  14317             grep -q "^Exec.*$base" "$file" || continue
  14406             # Make sure it's a visible desktop file (e.g. not "preferred-web-browser.desktop").
  14546             grep -Eq "^(NoDisplay|Hidden)=true" "$file" && continue
  14652             command="`grep -E "^Exec(\[[^]=]*])?=" "$file" | cut -d= -f 2- | first_word`"
  15004             command="`which "$command"`"
  15055             if [ x"`readlink -f "$command"`" = x"$binary" ]; then
  15157                 # Fix any double slashes that got added path composition
  15270                 echo "$file" | sed -e 's,//*,/,g'
  15352                 return
  15401             fi
  15420         done
  15435     done
  15451 #-------------------------------------------------------------
  15550 # map a .desktop file to a binary
  15612 ## FIXME: handle vendor dir case
  15653 desktop_file_to_binary()
  15706     search="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
  16046     desktop="`basename "$1"`"
  16104     IFS=:
  16116     for dir in $search; do
  16151         unset IFS
  16173         [ "$dir" ] && [ -d "$dir/applications" ] || continue
  16270         file="$dir/applications/$desktop"
  16342         [ -r "$file" ] || continue
  16405         # Remove any arguments (%F, %f, %U, %u, etc.).
  16474         command="`grep -E "^Exec(\[[^]=]*])?=" "$file" | cut -d= -f 2- | first_word`"
  16622         command="`which "$command"`"
  16667         readlink -f "$command"
  16726         return
  16745     done
  16761 #-------------------------------------------------------------
  17060 # Exit script on successfully completing the desired operation
  17160 exit_success()
  17201     if [ $# -gt 0 ]; then
  17233         echo "$@"
  17255         echo
  17272     fi
  17302     exit 0
  17321 #-----------------------------------------
  17374 # Exit script on malformed arguments, not enough arguments
  17467 # or missing required option.
  17525 # prints usage information
  17561 exit_failure_syntax()
  17611     if [ $# -gt 0 ]; then
  17643         echo "xdg-email: $@" >&2
  17704         echo "Try 'xdg-email --help' for more information." >&2
  20004     else
  20015         usage
  20033         echo "Use 'man xdg-email' or 'xdg-email --manual' for additional info."
  20153     fi
  20163     exit 1
  20201 #-------------------------------------------------------------
  20300 # Exit script on missing file specified on command line
  20371 exit_failure_file_missing()
  20427     if [ $# -gt 0 ]; then
  20461         echo "xdg-email: $@" >&2
  20522     fi
  20532     exit 2
  20550 #-------------------------------------------------------------
  20647 # Exit script on failure to locate necessary tool applications
  20747 exit_failure_operation_impossible()
  21015     if [ $# -gt 0 ]; then
  21047         echo "xdg-email: $@" >&2
  21110     fi
  21120     exit 3
  21136 #-------------------------------------------------------------
  21235 # Exit script on failure returned by a tool application
  21326 exit_failure_operation_failed()
  21370     if [ $# -gt 0 ]; then
  21422         echo "xdg-email: $@" >&2
  21463     fi
  21473     exit 4
  21511 #------------------------------------------------------------
  21607 # Exit script on insufficient permission to read a specified file
  21712 exit_failure_file_permission_read()
  21760     if [ $# -gt 0 ]; then
  22012         echo "xdg-email: $@" >&2
  22053     fi
  22063     exit 5
  22101 #------------------------------------------------------------
  22177 # Exit script on insufficient permission to write a specified file
  22303 exit_failure_file_permission_write()
  22352     if [ $# -gt 0 ]; then
  22404         echo "xdg-email: $@" >&2
  22445     fi
  22455     exit 6
  22473 check_input_file()
  22520     if [ ! -e "$1" ]; then
  22553         exit_failure_file_missing "file '$1' does not exist"
  22650     fi
  22657     if [ ! -r "$1" ]; then
  22712         exit_failure_file_permission_read "no permission to read file '$1'"
  23026     fi
  23040 check_vendor_prefix()
  23070     file_label="$2"
  23114     [ -n "$file_label" ] || file_label="filename"
  23176     file=`basename "$1"`
  23227     case "$file" in
  23253        [[:alpha:]]*-*)
  23302          return
  23322          ;;
  23336     esac
  23350     echo "xdg-email: $file_label '$file' does not have a proper vendor prefix" >&2
  23473     echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2
  23624     echo 'with a dash ("-"). An example '"$file_label"' is '"'example-$file'" >&2
  23746     echo "Use --novendor to override or 'xdg-email --manual' for additional info." >&2
  24075     exit 1
  24113 check_output_file()
  24141     # if the file exists, check if it is writeable
  24224     # if it does not exists, check if we are allowed to write on the directory
  24343     if [ -e "$1" ]; then
  24374         if [ ! -w "$1" ]; then
  24433             exit_failure_file_permission_write "no permission to write to file '$1'"
  24560         fi
  24573     else
  24604         DIR=`dirname "$1"`
  24637         if [ ! -w "$DIR" ] || [ ! -x "$DIR" ]; then
  24723             exit_failure_file_permission_write "no permission to create file '$1'"
  25046         fi
  25061     fi
  25073 #----------------------------------------
  25145 # Checks for shared commands, e.g. --help
  25220 check_common_commands()
  25252     while [ $# -gt 0 ] ; do
  25306         parm="$1"
  25330         shift
  25347         case "$parm" in
  25377             --help)
  25423             usage
  25445             echo "Use 'man xdg-email' or 'xdg-email --manual' for additional info."
  25571             exit_success
  25622             ;;
  25642             --manual)
  25670             manualpage
  25717             exit_success
  25750             ;;
  25770             --version)
  26017             echo "xdg-email 1.1.0 rc3"
  26066             exit_success
  26117             ;;
  26136         esac
  26153     done
  26167 check_common_commands "$@"
  26223 [ -z "${XDG_UTILS_DEBUG_LEVEL}" ] && unset XDG_UTILS_DEBUG_LEVEL;
  26325 if [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt 1 ]; then
  26403     # Be silent
  26423     xdg_redirect_output=" > /dev/null 2> /dev/null"
  26507 else
  26514     # All output to stderr
  26547     xdg_redirect_output=" >&2"
  26612 #--------------------------------------
  26662 # Checks for known desktop environments
  26732 # set variable DE to the desktop environments name, lowercase
  27031 detectDE()
  27046     # see https://bugs.freedesktop.org/show_bug.cgi?id=34164
  27143     unset GREP_OPTIONS
  27173     if [ -n "${XDG_CURRENT_DESKTOP}" ]; then
  27250       case "${XDG_CURRENT_DESKTOP}" in
  27317          # only recently added to menu-spec, pre-spec X- still in use
  27425          Cinnamon|X-Cinnamon)
  27463            DE=cinnamon;
  27513            ;;
  27531          ENLIGHTENMENT)
  27561            DE=enlightenment;
  27616            ;;
  27634          # GNOME, GNOME-Classic:GNOME, or GNOME-Flashback:GNOME
  27734          GNOME*)
  27755            DE=gnome;
  30002            ;;
  30020          KDE)
  30036            DE=kde;
  30061            ;;
  30077          LXDE)
  30116            DE=lxde;
  30142            ;;
  30160          MATE)
  30177            DE=mate;
  30223            ;;
  30241          XFCE)
  30260            DE=xfce
  30303            ;;
  30321          X-Generic)
  30345            DE=generic
  30373            ;;
  30411       esac
  30424     fi
  30434     if [ x"$DE" = x"" ]; then
  30472       # classic fallbacks
  30524       if [ x"$KDE_FULL_SESSION" != x"" ]; then DE=kde;
  30613       elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
  30716       elif [ x"$MATE_DESKTOP_SESSION_ID" != x"" ]; then DE=mate;
  31017       elif `dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager > /dev/null 2>&1` ; then DE=gnome;
  31312       elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
  31462       elif xprop -root 2> /dev/null | grep -i '^xfce_desktop_window' >/dev/null 2>&1; then DE=xfce
  31625       elif echo $DESKTOP | grep -q '^Enlightenment'; then DE=enlightenment;
  31741       fi
  31752     fi
  31762     if [ x"$DE" = x"" ]; then
  32020       # fallback to checking $DESKTOP_SESSION
  32076       case "$DESKTOP_SESSION" in
  32137          gnome)
  32157            DE=gnome;
  32204            ;;
  32222          LXDE|Lubuntu)
  32251            DE=lxde; 
  32276            ;;
  32314          MATE)
  32333            DE=mate;
  32357            ;;
  32375          xfce|xfce4|'Xfce Session')
  32441            DE=xfce;
  32465            ;;
  32503       esac
  32516     fi
  32526     if [ x"$DE" = x"" ]; then
  32564       # fallback to uname output for other platforms
  32651       case "$(uname 2>/dev/null)" in 
  32717         CYGWIN*)
  32740           DE=cygwin;
  32765           ;;
  33002         Darwin)
  33022           DE=darwin;
  33047           ;;
  33064       esac
  33077     fi
  33107     if [ x"$DE" = x"gnome" ]; then
  33152       # gnome-default-applications-properties is only available in GNOME 2.x
  33267       # but not in GNOME 3.x
  33324       which gnome-default-applications-properties > /dev/null 2>&1  || DE="gnome3"
  33447     fi
  33461 #----------------------------------------------------------------------------
  33577 # kfmclient exec/openURL can give bogus exit value in KDE <= 3.5.4
  33702 # It also always returns 1 in KDE 3.4 and earlier
  33764 # Simply return 0 in such case
  34024 kfmclient_fix_exit_code()
  34060     version=`LC_ALL=C.UTF-8 kde-config --version 2>/dev/null | grep '^KDE'`
  34174     major=`echo $version | sed 's/KDE.*: \([0-9]\).*/\1/'`
  34267     minor=`echo $version | sed 's/KDE.*: [0-9]*\.\([0-9]\).*/\1/'`
  34372     release=`echo $version | sed 's/KDE.*: [0-9]*\.[0-9]*\.\([0-9]\).*/\1/'`
  34507     test "$major" -gt 3 && return $1
  34554     test "$minor" -gt 5 && return $1
  34621     test "$release" -gt 4 && return $1
  34670     return 0
  34710 run_thunderbird()
  34734     local THUNDERBIRD MAILTO NEWMAILTO TO CC BCC SUBJECT BODY ATTACH
  35041     THUNDERBIRD="$1"
  35066     MAILTO=$(echo "$2" | sed 's/^mailto://')
  35143     echo "$MAILTO" | grep -qs "^?"
  35206     if [ "$?" = "0" ] ; then
  35243         MAILTO=$(echo "$MAILTO" | sed 's/^?//')
  35323     else
  35334         MAILTO=$(echo "$MAILTO" | sed 's/^/to=/' | sed 's/?/\&/')
  35436     fi
  35446     MAILTO=$(echo "$MAILTO" | sed 's/&/\n/g')
  35524     TO=$(/bin/echo -e $(echo "$MAILTO" | grep '^to=' | sed 's/^to=//;s/%\(..\)/\\x\1/g' | awk '{ printf "%s,",$0 }'))
  35712     CC=$(/bin/echo -e $(echo "$MAILTO" | grep '^cc=' | sed 's/^cc=//;s/%\(..\)/\\x\1/g' | awk '{ printf "%s,",$0 }'))
  36100     BCC=$(/bin/echo -e $(echo "$MAILTO" | grep '^bcc=' | sed 's/^bcc=//;s/%\(..\)/\\x\1/g' | awk '{ printf "%s,",$0 }'))
  36271     SUBJECT=$(echo "$MAILTO" | grep '^subject=' | tail -n 1)
  36366     BODY=$(echo "$MAILTO" | grep '^body=' | tail -n 1)
  36455     ATTACH=$(/bin/echo -e $(echo "$MAILTO" | grep '^attach=' | sed 's/^attach=//;s/%\(..\)/\\x\1/g' | awk '{ printf "%s,",$0 }' | sed 's/,$//'))
  36677     if [ -z "$TO" ] ; then
  36732         NEWMAILTO=
  36755     else
  36766         NEWMAILTO="to='$TO'"
  37023     fi
  37032     if [ -n "$CC" ] ; then
  37065         NEWMAILTO="${NEWMAILTO},cc='$CC'"
  37137     fi
  37146     if [ -n "$BCC" ] ; then
  37202         NEWMAILTO="${NEWMAILTO},bcc='$BCC'"
  37256     fi
  37265     if [ -n "$SUBJECT" ] ; then
  37325         NEWMAILTO="${NEWMAILTO},$SUBJECT"
  37377     fi
  37406     if [ -n "$BODY" ] ; then
  37443         NEWMAILTO="${NEWMAILTO},$BODY"
  37512     fi
  37522     if [ -n "$ATTACH" ] ; then
  37561         NEWMAILTO="${NEWMAILTO},attachment='${ATTACH}'"
  37651     fi
  37661     NEWMAILTO=$(echo "$NEWMAILTO" | sed 's/^,//')
  37743     DEBUG 1 "Running $THUNDERBIRD -compose \"$NEWMAILTO\""
  40036     "$THUNDERBIRD" -compose "$NEWMAILTO"
  40107     if [ $? -eq 0 ]; then
  40141         exit_success
  40166     else
  40177         exit_failure_operation_failed
  40245     fi
  40257 run_sylpheed()
  40300     DEBUG 1 "Running $1 --compose \"$2\""
  40352     "$1" --compose "$2"
  40402     if [ $? -eq 0 ]; then
  40434         exit_success
  40461     else
  40472         exit_failure_operation_failed
  40540     fi
  40552 open_kde()
  40567     if [ -n "$KDE_SESSION_VERSION" ] && [ "$KDE_SESSION_VERSION" -ge 5 ]; then
  40706         local kreadconfig=kreadconfig$KDE_SESSION_VERSION
  41000     else
  41011         local kreadconfig=kreadconfig
  41057     fi
  41067     if which $kreadconfig >/dev/null 2>&1; then
  41147         local profile=$($kreadconfig --file emaildefaults \
  41243                                      --group Defaults --key Profile)
  41350         if [ -n "$profile" ]; then
  41413             local client=$($kreadconfig --file emaildefaults \
  41512                                         --group "PROFILE_$profile" \
  41617                                         --key EmailClient \
  41713                                   | cut -d ' ' -f 1)
  42001             if echo "$client" | grep -Eq 'thunderbird|icedove'; then
  42106                 run_thunderbird "$client" "$1"
  42165             fi
  42204         fi
  42217     fi
  42227     local command
  42251     case "$KDE_SESSION_VERSION" in
  42314         '') command=kmailservice ;;
  42360         4) command=kde-open ;;
  42417         *) command=kde-open$KDE_SESSION_VERSION ;;
  42502     esac
  42514     if which $command >/dev/null 2>&1; then
  42570         DEBUG 1 "Running $command \"$1\""
  42642         if [ "$KDE_SESSION_VERSION" = 3 ]; then
  42722             # KDE3 uses locale's encoding when decoding the URI,
  43023             # so set it to UTF-8
  43064             LC_ALL=C.UTF-8 $command "$1"
  43135         else
  43152             $command "$1"
  43204         fi
  43217     else
  43230         DEBUG 1 "$command missing; trying generic mode instead."
  43331         open_generic "$1"
  43363     fi
  43373     if [ $? = 0 ]; then
  43423         exit_success
  43450     else
  43461         exit_failure_operation_failed
  43527     fi
  43541 open_gnome3()
  43561     local client
  43602     local desktop
  43624     desktop=`xdg-mime query default "x-scheme-handler/mailto"`
  43723     client=`desktop_file_to_binary "$desktop"`
  44002     echo $client | grep -E 'thunderbird|icedove' > /dev/null 2>&1
  44104     if [ $? -eq 0 ] ; then
  44137         run_thunderbird "$client" "$1"
  44206     fi
  44216     if gvfs-open --help 2>/dev/null 1>&2; then
  44275         DEBUG 1 "Running gvfs-open \"$1\""
  44350         gvfs-open "$1"
  44377     else
  44410         DEBUG 1 "Running gnome-open \"$1\""
  44464         gnome-open "$1"
  44514     fi
  44524     if [ $? -eq 0 ]; then
  44556         exit_success
  44603     else
  44614         exit_failure_operation_failed
  44662     fi
  44674 open_gnome()
  44713     local client
  44734     client=`gconftool-2 --get /desktop/gnome/url-handlers/mailto/command | cut -d ' ' -f 1` || ""
  45076     echo $client | grep -E 'thunderbird|icedove' > /dev/null 2>&1
  45200     if [ $? -eq 0 ] ; then
  45233         run_thunderbird "$client" "$1"
  45302     fi
  45312     if gvfs-open --help 2>/dev/null 1>&2; then
  45371         DEBUG 1 "Running gvfs-open \"$1\""
  45444         gvfs-open "$1"
  45473     else
  45504         DEBUG 1 "Running gnome-open \"$1\""
  45560         gnome-open "$1"
  45610     fi
  45620     if [ $? -eq 0 ]; then
  45652         exit_success
  45677     else
  45710         exit_failure_operation_failed
  45756     fi
  45771 open_xfce()
  46007     DEBUG 1 "Running exo-open \"$1\""
  46055     exo-open "$1"
  46100     if [ $? -eq 0 ]; then
  46132         exit_success
  46157     else
  46170         exit_failure_operation_failed
  46236     fi
  46250 open_envvar()
  46270     local OLDIFS="$IFS"
  46320     IFS=:
  46332     for i in $MAILER; do
  46363 	IFS="$OLDIFS"
  46403 	eval "$i" '"$1"'
  46426 	if [ $? -eq 0 ]; then
  46455 	    exit_success
  46503     done
  46515     exit_failure_operation_failed
  46562 open_lxde()
  46600     DEBUG 3 "Running open_lxde \"$1\""
  46650     local client
  46671     local desktop
  46713     desktop=`xdg-mime query default "x-scheme-handler/mailto"`
  47012     client=`desktop_file_to_binary "$desktop"`
  47072     # If no xdg-mime default was set, 
  47141     #   and if we are running Lubuntu, fallback to sylpheed
  47235     if [ -z "$desktop" -a "$DESKTOP_SESSION" = "Lubuntu" ]; then
  47336         client=`desktop_file_to_binary "sylpheed.desktop"`
  47431     fi
  47441     echo $client | grep thunderbird > /dev/null 2>&1
  47526     if [ $? -eq 0 ] ; then
  47561         run_thunderbird "$client" "$1"
  47630     fi
  47640     echo $client | grep sylpheed > /dev/null 2>&1
  47722     if [ $? -eq 0 ] ; then
  47755         DEBUG 3 "Running run_sylpheed \"$client\" \"$1\""
  50047         run_sylpheed "$client" "$1"
  50113     fi
  50123     if [ $? -eq 0 ]; then
  50155         exit_success
  50202     else
  50213         exit_failure_operation_failed
  50261     fi
  50273 open_generic()
  50314     local client
  50335     local desktop
  50357     desktop=`xdg-mime query default "x-scheme-handler/mailto"`
  50456     client=`desktop_file_to_binary "$desktop"`
  50535     echo $client | grep -E 'thunderbird|icedove' > /dev/null 2>&1
  50637     if [ $? -eq 0 ] ; then
  50672         run_thunderbird "$client" "$1"
  50741     fi
  50751     xdg-open "$1"
  50773     local ret=$?
  51015     # 3 means exit_failure_operation_impossible
  51075     if [ $ret != 3 ]; then
  51130         exit $ret
  51152     fi
  51162     IFS=":"
  51176     for browser in $BROWSER; do
  51236         if [ x"$browser" != x"" ]; then
  51307             browser_with_arg=`printf "$browser" "$1" 2>/dev/null`
  51411             if [ $? -ne 0 ]; then browser_with_arg=$browser;
  51506             fi
  51526             if [ x"$browser_with_arg" = x"$browser" ]; then "$browser" "$1";
  51643             else $browser_with_arg;
  51707             fi
  51727             if [ $? -eq 0 ]; then exit_success;
  52007             fi
  52026         fi
  52041     done
  52053     exit_failure_operation_impossible "no method available for opening '$1'"
  52173 url_encode()
  52212 # The shell needs the default internal field separator
  52301 # otherwise it would search for $utf8 as a command in whole.
  52376 IFS=" "
  52406 str=$(echo "$1" | $utf8)
  52437 local ORIG_LANG="$LANG"
  52467 local ORIG_LC_ALL="$LC_ALL"
  52523 LANG=C
  52532 LC_ALL=C
  52543 result=$(echo "$str" | awk '
  52600     BEGIN {
  52614         for ( i=1; i<=255; ++i ) ord [ sprintf ("%c", i) "" ] = i + 0
  52722         e = ""
  52741         linenr = 1
  52764     }
  52772     {
  53000         if ( linenr++ != 1 ) {
  53037             e = e "%0D%0A"
  53072         }
  53104         for ( i=1; i<=length ($0); ++i ) {
  53157             c = substr ($0, i, 1)
  53221             if ( ord [c] > 127 ) {
  53264                 e = e "%" sprintf("%02X", ord [c])
  53347             } else if ( c ~ /[@a-zA-Z0-9.\-\\\/]/ ) {
  53435                 e = e c
  53465             } else {
  53512                 e = e "%" sprintf("%02X", ord [c])
  53575             }
  53613         }
  53625     }
  53633     END {
  53645         print e
  53665     }
  53676 LANG="$ORIG_LANG"
  53720 LC_ALL="$ORIG_LC_ALL"
  53751 options=
  53762 mailto=
  53772 utf8="iconv -t utf8"
  54017 while [ $# -gt 0 ] ; do
  54047     parm="$1"
  54065     shift
  54100     case "$parm" in
  54124       --utf8)
  54142         utf8="cat"
  54165         ;;
  54201       --to)
  54215         if [ -z "$1" ] ; then
  54253             exit_failure_syntax "email address argument missing for --to"
  54365         fi
  54400         url_encode "$1"
  54430         options="${options}to=${result}&"
  54502         shift
  54520         ;;
  54534       --cc)
  54550         if [ -z "$1" ] ; then
  54606              exit_failure_syntax "email address argument missing for --cc"
  54721         fi
  54734         url_encode "$1"
  54764         options="${options}cc=${result}&"
  55036         shift
  55054         ;;
  55070       --bcc)
  55105         if [ -z "$1" ] ; then
  55143             exit_failure_syntax "email address argument missing for --bcc"
  55256         fi
  55271         url_encode "$1"
  55321         options="${options}bcc=${result}&"
  55374         shift
  55412         ;;
  55426       --subject)
  55447         if [ -z "$1" ] ; then
  55505             exit_failure_syntax "text argument missing for --subject option"
  55622         fi
  55635         url_encode "$1"
  55665         options="${options}subject=${result}&"
  55744         shift
  55762         ;;
  55776       --body)
  56014         if [ -z "$1" ] ; then
  56052             exit_failure_syntax "text argument missing for --body option"
  56164         fi
  56177         url_encode "$1"
  56227         options="${options}body=${result}&"
  56303         shift
  56321         ;;
  56335       --attach)
  56355         if [ -z "$1" ] ; then
  56413             exit_failure_syntax "file argument missing for --attach option"
  56527         fi
  56542         check_input_file "$1"
  56600         file=`readlink -f "$1"` # Normalize path
  56661         if [ -z "$file" ] || [ ! -f "$file" ] ; then
  56746             exit_failure_file_missing "file '$1' does not exist"
  57047         fi
  57063         url_encode "$file"
  57116         options="${options}attach=${result}&"
  57174         shift
  57212         ;;
  57226       -*)
  57240         exit_failure_syntax "unexpected option '$parm'"
  57330         ;;
  57344       mailto:*)
  57364         mailto="$parm"
  57413         ;;
  57427       *@*)
  57442         url_encode "$parm"
  57475         if [ -z "${mailto}" ] ; then
  57542             mailto="mailto:"${result}"?"
  57613         else
  57630             options="${options}to=${result}&"
  57706         fi
  57721         ;;
  57735       *)
  57746         exit_failure_syntax "unexpected argument '$parm'"
  60040         ;;
  60053     esac
  60064 done
  60072 if [ -z "${mailto}" ] ; then
  60127     # TO address is optional
  60164     mailto="mailto:?"
  60216 case $mailto in
  60236       *\?)
  60251         mailto="${mailto}${options}"
  60316         ;;
  60332       *\?*)
  60346         mailto="${mailto}&${options}"
  60414         ;;
  60430       *)
  60441         mailto="${mailto}?${options}"
  60507         ;;
  60522 esac
  60530 # Strip trailing ? and &
  60561 mailto=`echo "${mailto}"| sed 's/[?&]$//'`
  60635 # Shouldn't happen
  60660 [ x"${mailto}" != x"" ] || exit_failure_syntax
  60740 if which xdg-email-hook.sh > /dev/null 2> /dev/null; then
  61032     xdg-email-hook.sh "${mailto}"
  61074     if [ $? -eq 0 ]; then
  61126         exit_success
  61153     else
  61164         exit_failure_operation_failed
  61232     fi
  61245 detectDE
  61257 if [ x"$DE" = x"" ]; then
  61311     DE=generic
  61334 if [ "$DE" = generic ] && [ -z "$MAILER" ] && \
  61414     ( [ -r ~/.muttrc ] || [ -r ~/.mutt/muttrc ] ) && \
  61503     which mutt >/dev/null 2>&1; then
  61550     if [ -n "$DISPLAY" ]; then
  61607         MAILER="x-terminal-emulator -e mutt"
  61664     else
  61675         MAILER=mutt
  61721     fi
  61734 if [ x"$MAILER" != x"" ]; then
  61773     DE=envvar
  62015 # if BROWSER variable is not set, check some well known browsers instead
  62126 if [ x"$BROWSER" = x"" ]; then
  62165     BROWSER=www-browser:links2:elinks:links:lynx:w3m
  62252     if [ -n "$DISPLAY" ]; then
  62311         BROWSER=x-www-browser:firefox:iceweasel:seamonkey:mozilla:epiphany:konqueror:chromium-browser:google-chrome:$BROWSER
  62506     fi
  62521 case "$DE" in
  62537     envvar)
  62553     open_envvar "${mailto}"
  62607     ;;
  62617     kde)
  62630     open_kde "${mailto}"
  62661     ;;
  62671     gnome)
  62704     open_gnome "${mailto}"
  62737     ;;
  62747     gnome3|cinnamon|lxde|mate)
  63006     open_gnome3 "${mailto}"
  63042     ;;
  63052     xfce)
  63064     open_xfce "${mailto}"
  63116     ;;
  63126     lxde)
  63140     open_lxde "${mailto}"
  63172     ;;
  63202     generic)
  63217     open_generic "${mailto}"
  63254     ;;
  63264     *)
  63273     exit_failure_operation_impossible "no method available for opening '${mailto}'"
  63417     ;;
  63426 esac
